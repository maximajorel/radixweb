const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export function moduleData(){return{props:{display:String,name:String,block:Object},data:function(){return{todoList:[],loading:!1,queued:!1,strings:{newToDo:__("Add todo","uipress-lite"),whatwouldyoulike:__("What would you like to do?","uipress-lite"),title:__("Title","uipress-lite"),description:__("Add a description...")},activeTab:"all",tabs:[{name:"all",label:__("All","uipress-lite")},{name:"todo",label:__("Todo","uipress-lite")},{name:"completed",label:__("Completed","uipress-lite")}],newToDo:{name:"",description:"",done:!1}}},inject:["uipress"],mounted:function(){this.getToDoList()},watch:{todoList:{handler(i,e){let t=this;t.queued||(t.queued=!0,setTimeout(function(){t.queued=!1,t.uipress.saveUserPreference("uip-todo-list",i,!1)},8e3))},deep:!0}},computed:{returnToDos(){return"all"==this.activeTab?this.todoList:"todo"==this.activeTab?this.todoList.filter(function(i){return 0==i.done}):"completed"==this.activeTab?this.todoList.filter(function(i){return 1==i.done}):void 0}},methods:{addNewToDo(){let i=Object.assign({},this.newToDo);this.todoList.push(i)},getToDoList(){let i=this;i.loading=!0,this.uipress.getUserPreference("uip-todo-list").then(e=>{if(i.loading=!1,e.error)return i.uipress.notify(e.message,"","error",!0),!1;0!=e&&Array.isArray(e)&&(i.todoList=e)})},deleteItem(i){this.todoList.splice(i,1)},duplicateItem(i){let e=Object.assign({},i);this.todoList.push(e)}},template:'  <div>            <component is="style" scoped>              .list-enter-active,              .list-leave-active {                transition: all 0.5s ease;              }              .list-enter-from,              .list-leave-to {                opacity: 0;                transform: translateX(30px);              }            </component>            <div class="uip-flex uip-flex-column uip-row-gap-s uip-flex-no-wrap" :id="block.uid" :class="block.settings.advanced.options.classes.value">              \x3c!--NEW TODO --\x3e              <div class="uip-flex uip-flex-row uip-gap-xs">                <div class="uip-flex uip-padding-xxs uip-border uip-search-block uip-border-round uip-flex-center uip-flex-grow">                  <span class="uip-icon uip-text-muted uip-margin-right-xs uip-text-l uip-icon uip-icon-medium">check_box</span>                  <input class="uip-blank-input uip-flex-grow uip-text-s" type="text" :placeholder="strings.whatwouldyoulike" v-model="newToDo.name">                </div>                <button @click="addNewToDo()" class="uip-button-default uip-text-s uip-padding-xs uip-add-todo">{{strings.newToDo}}</button>              </div>              \x3c!--END TODO --\x3e              \x3c!--VIEWS--\x3e              <div class="uip-flex uip-flex-row uip-gap-s uip-padding-xxs uip-tabs">                <template v-for="tab in tabs">                  <div class="uip-link-muted uip-padding-bottom-xs uip-tab" :class="{\'uip-border-bottom-primary uip-text-bold uip-text-emphasis uip-tab-active\' : activeTab == tab.name}" @click="activeTab = tab.name">{{tab.label}}</div>                </template>              </div>              \x3c!-- END OF VIEWS--\x3e              \x3c!--TODO LIST--\x3e              <div v-if="loading" class="uip-padding-m uip-flex uip-flex-center uip-flex-middle"><loading-chart></loading-chart></div>              <div v-if="!loading" class="uip-flex uip-flex-column uip-row-gap-xs uip-padding-xxs uip-list-area">                <TransitionGroup name="list" >                      <div v-for="(item, index) in returnToDos" class="uip-flex uip-flex-row uip-gap-xs" :key="item" :data-index="index">                        <div >                          <input type="checkbox" class="uip-checkbox uip-checkbox-round" v-model="item.done">                        </div>                        <div class="uip-flex uip-flex-column uip-row-gap-xxxs uip-flex-grow">                          <input class="uip-blank-input uip-text-bold uip-list-item-title" v-model="item.name" type="text" :placeholder="strings.title">                          <textarea v-model="item.description" class="uip-input uip-text-s uip-text-muted uip-no-resize uip-blank-input uip-list-item-description" rows="1" :placeholder="strings.description"></textarea>                        </div>                        <div class="uip-w-50 uip-flex uip-flex-right uip-padding-xxs uip-flex-middle">                          <drop-down dropPos="left">                            <template v-slot:trigger>                              <div  class="uip-icon uip-link-muted uip-icon-muted uip-text-l uip-icon-medium" >more_vert</div>                            </template>                            <template v-slot:content>                              <div class="uip-padding-xxs uip-flex uip-flex-row uip-gap-xxs">                                <div class="uip-icon uip-link-danger uip-icon-muted uip-text-l" @click="deleteItem(index)">delete</div>                                <div class="uip-icon uip-link-muted uip-icon-muted uip-text-l" @click="duplicateItem(item)">content_copy</div>                              </div>                            </template>                          </drop-down>                        </div>                      </div>                </TransitionGroup>              </div>            </div>          </div>'}};