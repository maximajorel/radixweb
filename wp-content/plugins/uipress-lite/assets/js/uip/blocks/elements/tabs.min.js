const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export function moduleData(){return{props:{display:String,name:String,block:Object},data:function(){return{activeTab:0,contentIndex:0}},inject:["uipData","uipress","uiTemplate"],watch:{"block.settings.block.options.tabs.value.tabs":{handler(e,t){this.processContent()},deep:!0}},mounted:function(){this.processContent()},computed:{returnTabs(){return this.block.settings.block.options.tabs.value.tabs},returnBlockContent(){return this.block.content},returnTabContent(){return this.block.content[this.returnContentIndex].content},returnContentIndex(){let e=this.returnTabs[this.activeTab].id;return this.contentIndex=this.block.content.findIndex(t=>t.uid===e),this.contentIndex<0&&(this.contentIndex=0),this.contentIndex}},methods:{processContent(){let e=this.returnTabs,t=this.returnBlockContent;if(e.length<1)return;if(e.length==t.length)return;for(let n=0;n<e.length;n++){""==e[n].id&&(e[n].id=this.uipress.createUID());let i=t.filter(t=>t.uid===e[n].id);0===i.length?t[n]={name:e[n].name,moduleName:"uip-container",icon:"view_agenda",settings:{block:{options:{flexAlignSelf:{value:"",settingName:"flexAlignSelf"},flexJustifyContent:{value:"",settingName:"flexJustifyContent"},flexAlignItems:{value:"",settingName:"flexAlignItems"},flexDirection:{value:"",settingName:"flexDirection"},flexWrap:{value:{value:"wrap"},settingName:"flexWrap"},columnGap:{value:{value:"",units:"%"},settingName:"columnGap"},rowGap:{value:{value:"",units:"%"},settingName:"rowGap"}},name:"block"},container:{options:{verticalAlign:{value:{value:"none"},settingName:"verticalAlign"},horizontalAlign:{value:{value:"none"},settingName:"horizontalAlign"},flexGrow:{value:{value:"none"},settingName:"flexGrow"},stretchDirection:{value:{value:"none"},settingName:"stretchDirection"},dimensions:{settingName:"dimensions"}},styleType:"style",class:"",name:"container"},style:{options:{colorSelect:{settingName:"colorSelect"},imageSelect:{settingName:"imageSelect"},dimensions:{settingName:"dimensions"},padding:{settingName:"padding"},margin:{settingName:"margin "},textFormat:{settingName:"textFormat"},border:{settingName:"border"},positionDesigner:{settingName:"positionDesigner"},shadow:{settingName:"shadow"}},styleType:"style",class:"",name:"style"},advanced:{options:{classes:{value:"",settingName:"classes"},conditionalShow:{component:"conditionalShow ",label:"Conditional show "},customTemplate:{component:"customTemplate ",label:"Custom block template "},css:{value:"",settingName:"customCode "},js:{value:"",settingName:"customCode "}},name:"advanced"}},content:[],uid:e[n].id}:i[0].name=e[n].name}for(var n=0;n<t.length;n++){let i=t[n];0!==e.filter(e=>e.id===i.uid).length||t.splice(n,1)}this.activeTab>this.returnTabs.length-1&&(this.activeTab=0);let i=this.returnTabs[this.activeTab].id;this.contentIndex=this.block.content.findIndex(e=>e.uid===i),this.contentIndex<0&&(this.contentIndex=0)},updateIndex(e){this.activeTab=e},arraymove(e,t,n){e.splice(t+1,0,e.splice(n,1)[0])}},template:'\x3c!--builder mode--\x3e      <div :id="block.uid" :class="block.settings.advanced.options.classes.value">       <div class="uip-flex uip-flex-row">         <template v-for="(tab, index) in returnTabs">            <div class="uip-padding-xs uip-cursor-pointer uip-tab-item" @click="updateIndex(index)"            :class="{\'uip-border-bottom-primary uip-text-bold uip-tab-item-active\' : index == activeTab}">{{tab.name}}</div>         </template>       </div>       <div class="uip-tab-content-area uip-margin-top" v-if="returnTabs.length > 0">           <template v-for="(item, index) in returnBlockContent">            <uip-content-area v-if="returnContentIndex == index" :content="item.content" :returnData="function(data) {item.content = data} "></uip-content-area>           </template>        </div>      </div>'}};