const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export function moduleData(){return{props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function},data:function(){return{thisSearchInput:"",options:[],selectedOptions:this.selected,loading:!0,ui:{dropOpen:!1},strings:{add:__("Add","uipress-lite"),columnTitle:__("Column title","uipress-lite")}}},mounted:function(){},inject:["uipress"],computed:{formattedOptions(){return this.options}},watch:{selectedOptions:{handler(e,i){this.updateSelected(this.selectedOptions)},deep:!0}},methods:{getMetaTypes(){self=this;let e=new FormData;e.append("action","uip_get_post_table_columns"),e.append("security",uip_ajax.security),self.uipress.callServer(uip_ajax.ajax_url,e).then(e=>{if(e.error)return self.uipress.notify(e.error,"error"),void(self.loading=!1);self.loading=!1,console.log(e.keys),self.options=e.keys})},addSelected(e){this.selectedOptions.push(e)},removeSelected(e,i){let t=i.indexOf(e);t>-1&&(i=i.splice(t,1))},deleteCol(e){this.selectedOptions.splice(e,1)},ifInSearch(e,i){let t=e.toLowerCase(),p=i.toLowerCase();return!!t.includes(p)},onClickOutside(e){const i=e.path||(e.composedPath?e.composedPath():void 0);!i||i.includes(this.$el)||this.$el.contains(e.target)||this.closeThisComponent()},openThisComponent(){this.ui.dropOpen=!0,this.getMetaTypes(),requestAnimationFrame(()=>{document.documentElement.addEventListener("click",this.onClickOutside,!1)})},closeThisComponent(){this.ui.dropOpen=!1,document.documentElement.removeEventListener("click",this.onClickOutside,!1)},setdropAreaStyles(){let e=[];return e.class="uip-flex uip-flex-column uip-row-gap-xs uip-w-100p",e}},template:'<div class="uip-position-relative">        <div div class="uip-flex uip-flex-column uip-row-gap-s">                <div @click="openThisComponent" class="uip-padding-xs uip-background-muted uip-border-round uip-w-100p uip-max-w-400 uip-cursor-pointer uip-border-box" :class="{\'uip-active-outline\' : ui.dropOpen}">             <div class="uip-flex uip-flex-center">              <div class="uip-flex-grow uip-margin-right-s">                  <span class="uk-text-meta">{{placeHolder}}...</span>              </div>            </div>          </div>                  <div v-if="ui.dropOpen" class="uip-position-absolute uip-background-default uip-border-round uip-border uip-w-100p uip-max-w-400 uip-border-box uip-z-index-9 uip-margin-top-xs uip-overflow-hidden">                    <div class="uip-flex uip-background-default uip-padding-xs uip-border-bottom">              <span class="uip-icon uip-text-muted uip-margin-right-xs">search</span>              <input class="uip-blank-input uip-flex-grow" type="search"                :placeholder="searchPlaceHolder" v-model="thisSearchInput" autofocus>            </div>                      <div v-if="loading" class="uip-w-100p uip-flex uip-flex-center uip-flex-middle uip-h-200">              <loading-chart></loading-chart>            </div>                      <div class="uip-max-h-280 uip-overflow-auto uip-scrollbar">              <template v-for="option in formattedOptions">                <div class="uip-background-default uip-padding-xs hover:uip-background-muted"                 v-if="ifInSearch(option.name, thisSearchInput)"                 style="cursor: pointer">                  <div class="uip-flex uip-flex-row uip-flex-center uip-flex-between">                    <div class="uip-flex-grow">                      <div class="uip-text-bold uip-text-emphasis">{{option.label}}</div>                      <div class="uip-text-muted">{{option.name}}</div>                    </div>                    <div class="">                      <button class="uip-button-secondary uip-text-xs" @click="addSelected(option)">{{strings.add}}</button>                    </div>                  </div>                </div>              </template>            </div>                    </div>          \x3c!-- end of drop down --\x3e          <div class="" v-if="selectedOptions.length > 0">            <draggable             v-model="selectedOptions"             :group="{ name: \'columns\', pull: false, put: false }"            :component-data="setdropAreaStyles()"            @start="drag=true"            @end="drag=false"            itemKey="name"            :sort="true">              <template #item="{element, index}">                <div class="uip-flex">                  <div class="uip-border uip-border-round uip-border-right-square uip-padding-xxxs uip-w-22 uip-text-center uip-text-muted uip-icon uip-text-l uip-cursor-drag uip-flex-center">drag_indicator</div>                  <input type="text" v-model="element.label" :placeholder="strings.columnTitle" class="uip-input uip-input-small uip-border-left-remove uip-border-left-square uip-border-right-square">                  <div @click="deleteCol(index)" class="uip-border uip-border-round uip-border-left-square uip-border-left-remove uip-text-l uip-flex uip-icon uip-padding-xxxs uip-text-center hover:uip-background-grey uip-cursor-pointer uip-icon uip-text-normal uip-text-danger uip-flex-center">delete</div>                </div>              </template>            </draggable>          </div>        </div>      </div>'}};