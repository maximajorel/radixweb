export function moduleData(){return{props:{selected:Array,placeHolder:String,searchPlaceHolder:String,single:Boolean,updateSelected:Function},data:function(){return{thisSearchInput:"",options:[],selectedOptions:this.selected,loading:!0,ui:{dropOpen:!1}}},mounted:function(){},inject:["uipress"],computed:{formattedOptions(){return this.options}},watch:{selectedOptions:{handler(e,i){this.updateSelected(this.selectedOptions)},deep:!0}},methods:{getPostTypes(){self=this;let e=new FormData;e.append("action","uip_get_post_types"),e.append("security",uip_ajax.security),self.uipress.callServer(uip_ajax.ajax_url,e).then(e=>{if(e.error)return self.uipress.notify(e.error,"error"),void(self.loading=!1);self.loading=!1,self.options=e.postTypes})},addSelected(e,i){this.ifSelected(e,i)?this.removeSelected(e,i):1==this.single?i[0]=e:i.push(e)},removeSelected(e,i){let t=i.indexOf(e);t>-1&&(i=i.splice(t,1))},removeByIndex(e){this.selectedOptions.splice(e,1)},ifSelected:(e,i)=>i.indexOf(e)>-1,ifInSearch(e,i){let t=e.toLowerCase(),p=i.toLowerCase();return!!t.includes(p)},onClickOutside(e){const i=e.path||(e.composedPath?e.composedPath():void 0);!i||i.includes(this.$el)||this.$el.contains(e.target)||this.closeThisComponent()},openThisComponent(){this.getPostTypes(),this.ui.dropOpen=!0,requestAnimationFrame(()=>{document.documentElement.addEventListener("click",this.onClickOutside,!1)})},closeThisComponent(){this.ui.dropOpen=!1,document.documentElement.removeEventListener("click",this.onClickOutside,!1)}},template:'<div class="uip-position-relative" @click="openThisComponent">    <div class="uip-padding-xs uip-background-muted uip-border-round uip-w-100p uip-max-w-400 uip-cursor-pointer uip-border-box" :class="{\'uip-active-outline\' : ui.dropOpen}">       <div class="uip-flex uip-flex-center">      <div class="uip-flex-grow uip-margin-right-s" v-if="selectedOptions.length < 1">        <div>        <span class="uk-text-meta">{{placeHolder}}...</span>        </div>      </div>      <div v-else class="uip-flex-grow uip-flex uip-flex-row uip-row-gap-xxs uip-gap-xxs uip-margin-right-s uip-flex-wrap">        <template v-for="(item, index) in selectedOptions">          <div class=" uip-padding-left-xxs uip-padding-right-xxs uip-background-primary-wash uip-border-round uip-flex uip-gap-xxs uip-flex-center">            <span class="uip-text-s">{{item}}</span>            <a @click="removeByIndex(index)" class="uip-link-muted uip-no-underline uip-icon uip-text-l">backspace</a>          </div>        </template>      </div>      <span class="uip-icon uip-text-muted">add</span>      <span v-if="selectedOptions.length > 0" class="uip-text-inverse uip-background-primary uip-border-round uip-text-s uip-w-18 uip-margin-left-xxs uip-text-center">        {{selectedOptions.length}}      </span>      </div>    </div>    <div v-if="ui.dropOpen" class="uip-position-absolute uip-background-default uip-border-round uip-border uip-w-100p uip-max-w-400 uip-border-box uip-z-index-9 uip-margin-top-xs uip-overflow-hidden">      <div class="uip-flex uip-background-default uip-padding-xs uip-border-bottom">        <span class="uip-icon uip-text-muted uip-margin-right-xs">search</span>        <input class="uip-blank-input uip-flex-grow" type="search"          :placeholder="searchPlaceHolder" v-model="thisSearchInput" autofocus>      </div>      <div v-if="loading" class="uip-w-100p uip-flex uip-flex-center uip-flex-middle uip-h-200">        <loading-chart></loading-chart>      </div>      <div class="uip-max-h-280 uip-overflow-auto">      <template v-for="option in formattedOptions">        <div class="uip-background-default uip-padding-xs hover:uip-background-muted"         @click="addSelected(option.name, selectedOptions)"         v-if="ifInSearch(option.name, thisSearchInput)"         style="cursor: pointer">        <div class="uip-flex uip-flex-row uip-flex-center">          <div class="uip-flex uip-flex-center uip-flex-middle uip-margin-right-xs">          <input type="checkbox" :name="option.name" :value="option.name" class="uip-checkbox" :checked="ifSelected(option.name, selectedOptions)">          </div>          <div class="uip-flex-grow">          <div class="uip-text-bold uip-text-emphasis">{{option.label}}</div>          <div class="uip-text-muted">{{option.name}}</div>          </div>        </div>        </div>      </template>      </div>    </div>    </div>'}};