const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export function moduleData(){return{props:{mode:String,insertArea:Array},data:function(){return{loading:!0,categories:[],search:"",patternTypes:[{name:"layout",label:__("Layout","uipress-lite")},{name:"block",label:__("Block","uipress-lite")}],strings:{proBlock:__("Pro","uipress-lite"),seachPatterns:__("Search patterns...","uipress-lite"),patternTitle:__("Pattern title","uipress-lite"),patternType:__("Pattern type","uipress-lite"),savePattern:__("Save pattern","uipress-lite"),description:__("Description","uipress-lite"),patternIcon:__("Pattern icon","uipress-lite"),import:__("Import","uipress-lite")}}},inject:["uipData","router","uipress","uiTemplate"],mounted:function(){this.loading=!1},computed:{returnPatterns(){return this.uiTemplate.patterns}},methods:{setDropAreaClasses(){let e=[];return e.class="uip-flex uip-flex-column uip-row-gap-xxs uip-w-100p",e},clone(e){let t=this.duplicateBlock(e.template);return JSON.parse(JSON.stringify(t))},duplicateBlock(e){let t=Object.assign({},e);return t.uid=this.uipress.createUID(),t.options=[],t.settings=JSON.parse(JSON.stringify(t.settings)),t.content&&(t.content=this.duplicateChildren(t.content)),t},duplicateChildren(e){let t=[];for(let i of e){let e=Object.assign({},i);e.uid=this.uipress.createUID(),e.settings=JSON.parse(JSON.stringify(e.settings)),e.content&&(e.content=this.duplicateChildren(e.content)),t.push(e)}return t},setDragAreaClasses(){let e=[];return e.class="uip-flex uip-flex-column uip-row-gap-xxxs",e},insertAtPos(e){"click"==this.mode&&Array.isArray(this.insertArea)&&this.insertArea.push(this.clone(e))},inSearch(e){if(""==this.search)return!0;let t=this.search.toLowerCase();return!!e.name.toLowerCase().includes(t)||!!e.description.toLowerCase().includes(t)},returnIcon:e=>e.icon&&""!=e.icon?e.icon:"layout"==e.type?"account_tree":"block"==e.type?"add_box":"interests",getPatterns(){let e=this,t=new FormData;t.append("action","uip_get_ui_patterns_list"),t.append("security",uip_ajax.security),e.uipress.callServer(uip_ajax.ajax_url,t).then(t=>{t.error&&e.uipress.notify(t.message,"uipress-lite","","error",!0),t.success&&(e.uiTemplate.patterns=t.patterns)})},deleteThisItem(e){let t=this;this.uipress.deletePost(e).then(e=>{e&&t.getPatterns()})},exportPattern(e,t){self=this;let i=JSON.stringify(e),s=e.name,p=new Date,n=String(p.getDate()).padStart(2,"0"),r="uip-ui-pattern-"+s+"-"+(String(p.getMonth()+1).padStart(2,"0")+"-"+n+"-"+p.getFullYear())+".json",a="data:text/json;charset=utf-8,"+encodeURIComponent(i),u=document.getElementById("uip-pattern-export-"+t);u.setAttribute("href",a),u.setAttribute("download",r),u.click(),self.uipress.notify(__("Pattern exported","uipress-lite"),"","success",!0)},importPattern(){let e=this,t=e.uipress.notify(__("Importing pattern","uipress-lite"),"","default",!1,!0),i=document.getElementById("uip-import-pattern").files[0];if("application/json"!=i.type)return void e.uipress.notify("Patterns must be in valid JSON format","","error",!0,!1);if(i.size>1e6)return void e.uipress.notify("Uploaded file is too big","","error",!0,!1);let s=new FileReader;s.readAsText(i,"UTF-8"),s.onload=function(i){let s,p=i.target.result;try{s=JSON.parse(p)}catch(i){return e.uipress.notify(i,"","error",!0,!1),void e.uipress.destroy_notification(t)}if(null!=s){if(!e.uipress.isObject(s))return e.uipress.notify("Pattern is not valid","","error",!0,!1),void e.uipress.destroy_notification(t);if(!("template"in s))return e.uipress.notify("Pattern is not valid","","error",!0,!1),void e.uipress.destroy_notification(t);e.uipress.validDateTemplate([s.template]).then(i=>{i.includes(!1)?(e.uipress.notify("File is not a valid JSON template","","error",!0,!1),e.uipress.destroy_notification(t)):e.savePatternToDb(s).then(i=>{i&&(e.uipress.notify("Pattern imported","","success",!0,!1),e.uipress.destroy_notification(t))})})}else e.uipress.notify("JSON parse failed","","error",!0,!1),e.uipress.destroy_notification(t)}},async savePatternToDb(e){let t=this,i=JSON.stringify(e.template,(e,t)=>"true"===t?"uiptrue":!0===t?"uiptrue":"false"===t?"uipfalse":!1===t?"uipfalse":""===t?"uipblank":t),s=new FormData;return s.append("action","uip_save_ui_pattern"),s.append("security",uip_ajax.security),s.append("pattern",i),s.append("name",e.name),s.append("type",e.type),s.append("description",e.description),s.append("icon",e.icon),await t.uipress.callServer(uip_ajax.ajax_url,s).then(e=>e.error?(t.uipress.notify(e.message,"uipress-lite","","error",!0),!1):e.success?(t.uiTemplate.patterns=e.patterns,!0):void 0)}},template:'<div class="">        <div class="uip-flex uip-flex-row uip-gap-xs uip-margin-bottom-s">          <div class="uip-flex uip-padding-xxs uip-border uip-search-block uip-border-round uip-flex-grow">            <span class="uip-icon uip-text-muted uip-margin-right-xs uip-text-l uip-icon uip-icon-medium">search</span>            <input class="uip-blank-input uip-flex-grow uip-text-s" type="search" :placeholder="strings.seachPatterns" autofocus="" v-model="search">          </div>          <label class="">            <div class="uip-button-default uip-padding-xs uip-flex uip-gap-xxs uip-flex-center uip-text-s">              <span class="uip-icon uip-icon-medium">file_upload</span>              <span class="">{{strings.import}}</span>            </div>            <input hidden accept=".json" type="file" single="" id="uip-import-pattern" @change="importPattern()">          </label>        </div>                <div class=" uip-margin-bottom-s uip-flex-wrap uip-flex-row">                                          <draggable                   v-model="uiTemplate.patterns"                   handle=".uip-pattern-drag"                  :component-data="setDragAreaClasses()"                  :group="{ name: \'uip-patterns\', pull: \'clone\', put: false, revertClone: true }"                  @start="uiTemplate.drag = true"                   @end="uiTemplate.drag = false"                   ghost-class=""                  :clone="clone"                  itemKey="id">                    <template #item="{element, index}">                                           <div v-if="inSearch(element)" class="uip-pattern-item" :block-name="element.description"                         @mouseenter="element.hover = true" @mouseleave="element.hover = false">                            <div @click="insertAtPos(element)" class="uip-border-round uip-padding-xxs hover:uip-background-muted uip-cursor-pointer uip-pattern-drag">                              <div class="uip-flex uip-flex-row uip-gap-xs uip-flex-center">                                <div class="uip-icon uip-icon-large uip-text-xl uip-padding-xs uip-flex-center uip-flex-middle uip-border uip-border-round">                                  {{returnIcon(element)}}                                </div>                                 <div class="uip-flex uip-flex-column uip-row-gap-xxxs uip-flex-shrink">                                  <div class="uip-flex uip-flex-between">                                    <div class="uip-flex uip-flex-row uip-gap-xxs uip-flex-center">                                      <span class="uip-text-emphasis">{{element.name}}</span>                                      <span class="uip-text-xs uip-background-primary-wash uip-border-round uip-padding-xxxs uip-post-type-label">{{element.type}}</span>                                    </div>                                  </div>                                  <div class="uip-text-s uip-text-muted">{{element.description}}</div>                                </div>                                                              <div class="uip-flex uip-flex-right uip-w-60 uip-flex-grow" >                                  <drop-down dropPos="left">                                    <template v-slot:trigger>                                      <span class="uip-icon uip-link-muted uip-text-l uip-icon-medium">more_vert</span>                                    </template>                                    <template v-slot:content>                                                                        \x3c!--Pattern contextual options --\x3e                                        <div class="uip-flex uip-flex-row uip-gap-xxs uip-padding-xxxs">                                          <span @click="exportPattern(element, index)"                                          class="uip-icon uip-link-muted uip-text-l uip-icon-medium">file_download</span>                                          <a href="" :id="\'uip-pattern-export-\' + index" style="display:none"></a>                                          <drop-down dropPos="left">                                            <template v-slot:trigger>                                              <span                                               class="uip-icon uip-link-muted uip-text-l uip-icon-medium ">edit_document</span>                                            </template>                                            <template v-slot:content>                                              <div class="uip-padding-s uip-flex uip-flex-column uip-row-gap-xs">                                                <div class="uip-flex uip-flex-column uip-row-gap-xxs">                                                  <div class="uip-text-s uip-text-muted">{{strings.patternTitle}}</div>                                                  <input class="uip-input" type="text" v-model="element.name">                                                </div>                                                <div class="uip-flex uip-flex-column uip-row-gap-xxs">                                                  <div class="uip-text-s uip-text-muted">{{strings.patternIcon}}</div>                                                  <icon-select :value="{value: element.icon}" :returnData="function(data) {element.icon = data.value}"></icon-select>                                                </div>                                                <div class="uip-flex uip-flex-column uip-row-gap-xxs">                                                  <div class="uip-text-s uip-text-muted">{{strings.description}}</div>                                                  <textarea class="uip-input" rows="4" v-model="element.description"></textarea>                                                </div>                                                <div class="uip-flex uip-flex-column uip-row-gap-xxs">                                                  <div class="uip-text-s uip-text-muted">{{strings.patternType}}</div>                                                  <select class="uip-input" v-model="element.type">                                                    <template v-for="option in patternTypes">                                                      <option :value="option.name">{{option.label}}</option>                                                    </template>                                                  </select>                                                </div>                                              </div>                                            </template>                                          </drop-down>                                          <span @click="deleteThisItem(element.id)"                                          class="uip-icon uip-link-danger uip-text-l uip-icon-medium">delete</span>                                        </div>                                      \x3c!--End pattern contextual Options --\x3e                                                                        </template>                                  </drop-down>                                </div>                                                          </div>                            </div>                        </div>                                        </template>                </draggable>                                      </div>      </div>'}};