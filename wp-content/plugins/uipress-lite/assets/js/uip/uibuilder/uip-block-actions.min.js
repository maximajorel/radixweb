const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export function moduleData(){return{props:{block:Object,parentList:Array,currentIndex:Number,smallIcons:Boolean,reverse:Boolean,disabled:Array},data:function(){return{option:"",strings:{savePattern:__("Save pattern","uipress-lite")}}},inject:{uipData:{from:"uipData"},router:{from:"router"},uipress:{from:"uipress"},uiTemplate:{from:"uiTemplate"},saveTemplate:{from:"saveTemplate",default:()=>({name:"save not ready"})},openModal:{from:"openModal"}},watch:{},computed:{returnDisabled(){return Array.isArray(this.disabled)?this.disabled:[]}},methods:{openSettings(e){let t=this.$route.params.templateID;this.router.push("/uibuilder/"+t+"/settings/blocks/"+e)},duplicateBlock(e,t){let i=JSON.parse(JSON.stringify(this.uiTemplate.content)),s=Object.assign({},t);s.uid=this.uipress.createUID(),s.options=[],s.settings=JSON.parse(JSON.stringify(s.settings)),s.content&&(s.content=this.duplicateChildren(s.content)),e.splice(e.length,0,s);let n=JSON.parse(JSON.stringify(this.uiTemplate.content));this.uipress.logHistoryChange(t.name+__(" duplicated","uipress-lite"),i,n)},duplicateChildren(e){let t=[];for(let i of e){let e=Object.assign({},i);e.uid=this.uipress.createUID(),e.settings=JSON.parse(JSON.stringify(e.settings)),e.content&&(e.content=this.duplicateChildren(e.content)),t.push(e)}return t},removeBlock(e,t,i){let s=this;s.uipress.deleteByUID(s.uiTemplate.content,i.uid).then(e=>{if(e){s.uipress.notify(i.name+" "+__("block deleted","uipress-lite"),"","default",!0);let e=JSON.parse(JSON.stringify(s.uiTemplate.content));if(s.uipress.logHistoryChange(i.name+" "+__("block deleted","uipress-lite"),e,!1),s.$route.params.uid&&s.$route.params.uid==i.uid){let e=s.$route.params.templateID;s.router.push("/uibuilder/"+e+"/")}}})},confirmSyncPattern(e){let t=this;this.uipress.confirm(__("Sync pattern?","uipress-lite"),__("This will update the pattern template and will sync this pattern's changes accross all templates using the same pattern","uipress-lite"),__("Sync patern","uipress-lite")).then(i=>{if(i){let i=JSON.parse(JSON.stringify(t.uiTemplate.content));t.uipress.cleanTemplate(i).then(s=>{t.saveTemplate(i).then(i=>{let s=t.uipress.notify(__("Pattern sync in progress","uipress-lite"),"","default",!1,!0);t.uipress.blockHouseKeeping(e).then(e=>{t.syncUiPatternDB(e,s)})})})}})},syncUiPatternDB(e,t){let i=this,s=new FormData,n=JSON.stringify(e,(e,t)=>"true"===t?"uiptrue":!0===t?"uiptrue":"false"===t?"uipfalse":!1===t?"uipfalse":""===t?"uipblank":t);s.append("action","uip_sync_ui_pattern"),s.append("security",uip_ajax.security),s.append("pattern",n),s.append("patternID",e.patternID),s.append("templateID",i.$route.params.templateID),console.log(i.$route.params.templateID),i.uipress.callServer(uip_ajax.ajax_url,s).then(s=>{s.error&&(i.uipress.notify(s.message,"uipress-lite","","error",!0),i.saving=!1),s.success&&(s.newPattern&&(e.patternID=JSON.parse(JSON.stringify(s.newPattern))),s.newTemplate&&(i.uiTemplate.content=s.newTemplate),i.uiTemplate.patterns=s.patterns,i.uipress.notify(__("Pattern succesfully synced","uipress-lite"),"","success",!0),i.uipress.destroy_notification(t))})},ifEnabled(e){return!this.returnDisabled.includes(e)}},template:'\t<div class="uip-flex uip-gap-xxs" :class="[{\'uip-text-l\' : !smallIcons},{\'uip-flex-reverse\' : reverse}]">\t  <div v-if="ifEnabled(\'settings\')" class="uip-icon uip-link-muted"  @click="openSettings(block.uid)">tune</div>\t  <div v-if="ifEnabled(\'duplicate\')" class="uip-icon uip-link-muted" @click="duplicateBlock(parentList, block)">content_copy</div>    <div v-if="ifEnabled(\'pattern\')" class="uip-icon uip-link-muted" @click="openModal(\'saveaspattern\', strings.savePattern, {blockitem: block})">bookmark_add</div>\t  <div v-if="block.patternID && ifEnabled(\'sync\')" class="uip-icon uip-link-muted" @click="confirmSyncPattern(block)">sync</div>\t  <div class="uip-border-left"></div>\t  <div v-if="ifEnabled(\'delete\')"  class="uip-icon uip-link-danger" @click="removeBlock(parentList, currentIndex, block)">delete</div>\t</div>'}};