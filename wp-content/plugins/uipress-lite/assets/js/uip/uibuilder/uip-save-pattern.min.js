const{__:__,_x:_x,_n:_n,_nx:_nx}=wp.i18n;export function moduleData(){return{props:{args:Object,triggerClass:String},data:function(){return{modelOpen:!1,dropWidth:0,position:this.dropPos,saving:!1,theBlock:this.args.blockitem,strings:{saveAsPattern:__("Save as pattern","uipress-lite"),patternTitle:__("Pattern title","uipress-lite"),patternType:__("Pattern type","uipress-lite"),patternDescription:__("Patterns can be either single components or entire layoutsd and are a great way of creating reusable blocks for your projects."),savePattern:__("Save pattern","uipress-lite"),description:__("Description","uipress-lite"),patternIcon:__("Pattern icon","uipress-lite")},newPattern:{name:"",description:"",type:"block",icon:{value:"interests"}},patternTypes:[{name:"layout",label:__("Layout","uipress-lite")},{name:"block",label:__("Block","uipress-lite")}]}},inject:["uipress","uiTemplate"],watch:{},mounted:function(){},computed:{returnBlockName(){return this.blockitem.name},returnBlock(){return this.theBlock=this.args.blockitem,this.theBlock}},methods:{savePattern(){this.saving=!0;let e=this.args.blockitem;this.newPattern.name&&""!=this.newPattern.name||(this.uipress.notify(__("Pattern not saved","uipress-lite"),__("Pattern title is required","uipress-lite"),"warning",!0),this.saving=!1);let t=this;t.uipress.blockHouseKeeping(e).then(i=>{t.savePatternToDb(e)})},savePatternToDb(e){let t=this,i=e.uid,s=JSON.stringify(e,(e,t)=>"true"===t?"uiptrue":!0===t?"uiptrue":"false"===t?"uipfalse":!1===t?"uipfalse":""===t?"uipblank":t),n=new FormData;n.append("action","uip_save_ui_pattern"),n.append("security",uip_ajax.security),n.append("pattern",s),n.append("name",t.newPattern.name),n.append("type",t.newPattern.type),n.append("description",t.newPattern.description),n.append("icon",t.newPattern.icon.value),t.uipress.callServer(uip_ajax.ajax_url,n).then(e=>{if(e.error&&(t.uipress.notify(e.message,"uipress-lite","","error",!0),t.saving=!1),e.success){t.uipress.notify(__("Pattern saved","uipress-lite"),"","success",!0),t.saving=!1,t.uiTemplate.patterns=e.patterns;let s=e.patternid;t.uipress.searchForBlock(t.uiTemplate.content,i).then(e=>{e&&(e.patternID=s)})}})}},template:'          <div class="uip-flex uip-flex-column uip-row-gap-xs">                              <div class="uip-flex uip-flex-column uip-row-gap-xxs">              <div class="uip-text-s uip-text-muted">{{strings.patternTitle}}</div>              <input class="uip-input" type="text" v-model="newPattern.name">            </div>                      <div class="uip-flex uip-flex-column uip-row-gap-xxs">              <div class="uip-text-s uip-text-muted">{{strings.patternIcon}}</div>              <icon-select :value="newPattern.icon" :returnData="function(data) {newPattern.icon = data}"></icon-select>            </div>                      <div class="uip-flex uip-flex-column uip-row-gap-xxs">              <div class="uip-text-s uip-text-muted">{{strings.description}}</div>              <textarea class="uip-input" rows="4" v-model="newPattern.description"></textarea>            </div>                      <div class="uip-flex uip-flex-column uip-row-gap-xxs">              <div class="uip-text-s uip-text-muted">{{strings.patternType}}</div>              <select class="uip-input" v-model="newPattern.type">                <template v-for="option in patternTypes">                  <option :value="option.name">{{option.label}}</option>                </template>              </select>            </div>                      <div class="uip-margin-top-s">              <uip-save-button :saving="saving" :buttonText="strings.savePattern" :saveFunction="savePattern"></uip-save-button>            </div>          \t\t    </div>'}};